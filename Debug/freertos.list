
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001554  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001664  08001664  00011664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001684  08001684  00011684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001688  08001688  00011688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800168c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004538  20000004  08001690  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000453c  08001690  0002453c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000074f1  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000012bb  00000000  00000000  0002751e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000868  00000000  00000000  000287e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  00029048  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002ee0  00000000  00000000  00029808  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ec8  00000000  00000000  0002c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f5b0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002364  00000000  00000000  0002f62c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00031990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000004 	.word	0x20000004
 800012c:	00000000 	.word	0x00000000
 8000130:	0800164c 	.word	0x0800164c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000008 	.word	0x20000008
 800014c:	0800164c 	.word	0x0800164c

08000150 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	f003 0307 	and.w	r3, r3, #7
 8000162:	2b00      	cmp	r3, #0
 8000164:	d004      	beq.n	8000170 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	f023 0307 	bic.w	r3, r3, #7
 800016c:	3308      	adds	r3, #8
 800016e:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000170:	f000 fb94 	bl	800089c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000174:	4b16      	ldr	r3, [pc, #88]	; (80001d0 <pvPortMalloc+0x80>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d105      	bne.n	8000188 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800017c:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <pvPortMalloc+0x84>)
 800017e:	f023 0307 	bic.w	r3, r3, #7
 8000182:	461a      	mov	r2, r3
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <pvPortMalloc+0x80>)
 8000186:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000188:	4b13      	ldr	r3, [pc, #76]	; (80001d8 <pvPortMalloc+0x88>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	f244 32f7 	movw	r2, #17399	; 0x43f7
 8000194:	4293      	cmp	r3, r2
 8000196:	d813      	bhi.n	80001c0 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000198:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <pvPortMalloc+0x88>)
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	441a      	add	r2, r3
 80001a0:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <pvPortMalloc+0x88>)
 80001a2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80001a4:	429a      	cmp	r2, r3
 80001a6:	d90b      	bls.n	80001c0 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80001a8:	4b09      	ldr	r3, [pc, #36]	; (80001d0 <pvPortMalloc+0x80>)
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <pvPortMalloc+0x88>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4413      	add	r3, r2
 80001b2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <pvPortMalloc+0x88>)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	4413      	add	r3, r2
 80001bc:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <pvPortMalloc+0x88>)
 80001be:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80001c0:	f000 fb7a 	bl	80008b8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80001c4:	68fb      	ldr	r3, [r7, #12]
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	3710      	adds	r7, #16
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	20004424 	.word	0x20004424
 80001d4:	20000028 	.word	0x20000028
 80001d8:	20004420 	.word	0x20004420

080001dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f103 0208 	add.w	r2, r3, #8
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f04f 32ff 	mov.w	r2, #4294967295
 8000206:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f103 0208 	add.w	r2, r3, #8
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f103 0208 	add.w	r2, r3, #8
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	689a      	ldr	r2, [r3, #8]
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	683a      	ldr	r2, [r7, #0]
 800026e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	1c5a      	adds	r2, r3, #1
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	601a      	str	r2, [r3, #0]
}
 8000280:	bf00      	nop
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr

0800028a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800028a:	b480      	push	{r7}
 800028c:	b085      	sub	sp, #20
 800028e:	af00      	add	r7, sp, #0
 8000290:	6078      	str	r0, [r7, #4]
 8000292:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002a0:	d103      	bne.n	80002aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e00c      	b.n	80002c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3308      	adds	r3, #8
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	e002      	b.n	80002b8 <vListInsert+0x2e>
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d9f6      	bls.n	80002b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	683a      	ldr	r2, [r7, #0]
 80002d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	1c5a      	adds	r2, r3, #1
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	601a      	str	r2, [r3, #0]
}
 80002f0:	bf00      	nop
 80002f2:	3714      	adds	r7, #20
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr

080002fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002fa:	b480      	push	{r7}
 80002fc:	b085      	sub	sp, #20
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	6892      	ldr	r2, [r2, #8]
 8000310:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	6852      	ldr	r2, [r2, #4]
 800031a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	685a      	ldr	r2, [r3, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	429a      	cmp	r2, r3
 8000324:	d103      	bne.n	800032e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689a      	ldr	r2, [r3, #8]
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	1e5a      	subs	r2, r3, #1
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681b      	ldr	r3, [r3, #0]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	3b04      	subs	r3, #4
 800035c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	3b04      	subs	r3, #4
 800036a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	f023 0201 	bic.w	r2, r3, #1
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3b04      	subs	r3, #4
 800037a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800037c:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <pxPortInitialiseStack+0x54>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	3b14      	subs	r3, #20
 8000386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	3b20      	subs	r3, #32
 8000392:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000394:	68fb      	ldr	r3, [r7, #12]
}
 8000396:	4618      	mov	r0, r3
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	080003a5 	.word	0x080003a5

080003a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003b2:	f383 8811 	msr	BASEPRI, r3
 80003b6:	f3bf 8f6f 	isb	sy
 80003ba:	f3bf 8f4f 	dsb	sy
 80003be:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80003c0:	bf00      	nop
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0fc      	beq.n	80003c2 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
	...

080003e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80003fe:	4770      	bx	lr

08000400 <pxCurrentTCBConst2>:
 8000400:	20004428 	.word	0x20004428
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800042c:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <xPortStartScheduler+0x38>)
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <xPortStartScheduler+0x38>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <xPortStartScheduler+0x38>)
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <xPortStartScheduler+0x38>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000444:	f000 f888 	bl	8000558 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <xPortStartScheduler+0x3c>)
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800044e:	f7ff ffdb 	bl	8000408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000452:	f000 fb67 	bl	8000b24 <vTaskSwitchContext>
	prvTaskExitError();
 8000456:	f7ff ffa5 	bl	80003a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800045a:	2300      	movs	r3, #0
}
 800045c:	4618      	mov	r0, r3
 800045e:	bd80      	pop	{r7, pc}
 8000460:	e000ed20 	.word	0xe000ed20
 8000464:	20000000 	.word	0x20000000

08000468 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000472:	f383 8811 	msr	BASEPRI, r3
 8000476:	f3bf 8f6f 	isb	sy
 800047a:	f3bf 8f4f 	dsb	sy
 800047e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <vPortEnterCritical+0x2c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	4a03      	ldr	r2, [pc, #12]	; (8000494 <vPortEnterCritical+0x2c>)
 8000488:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	20000000 	.word	0x20000000

08000498 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <vPortExitCritical+0x2c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	4a07      	ldr	r2, [pc, #28]	; (80004c4 <vPortExitCritical+0x2c>)
 80004a6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <vPortExitCritical+0x2c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d104      	bne.n	80004ba <vPortExitCritical+0x22>
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	20000000 	.word	0x20000000
	...

080004d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80004d0:	f3ef 8009 	mrs	r0, PSP
 80004d4:	f3bf 8f6f 	isb	sy
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <pxCurrentTCBConst>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80004e0:	6010      	str	r0, [r2, #0]
 80004e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80004e6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80004ea:	f380 8811 	msr	BASEPRI, r0
 80004ee:	f000 fb19 	bl	8000b24 <vTaskSwitchContext>
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	f380 8811 	msr	BASEPRI, r0
 80004fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80004fe:	6819      	ldr	r1, [r3, #0]
 8000500:	6808      	ldr	r0, [r1, #0]
 8000502:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000506:	f380 8809 	msr	PSP, r0
 800050a:	f3bf 8f6f 	isb	sy
 800050e:	4770      	bx	lr

08000510 <pxCurrentTCBConst>:
 8000510:	20004428 	.word	0x20004428
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop

08000518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	__asm volatile
 800051e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000522:	f383 8811 	msr	BASEPRI, r3
 8000526:	f3bf 8f6f 	isb	sy
 800052a:	f3bf 8f4f 	dsb	sy
 800052e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000530:	f000 fa50 	bl	80009d4 <xTaskIncrementTick>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d003      	beq.n	8000542 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <SysTick_Handler+0x3c>)
 800053c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	e000ed04 	.word	0xe000ed04

08000558 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <vPortSetupTimerInterrupt+0x24>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <vPortSetupTimerInterrupt+0x28>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <vPortSetupTimerInterrupt+0x2c>)
 800056a:	4a07      	ldr	r2, [pc, #28]	; (8000588 <vPortSetupTimerInterrupt+0x30>)
 800056c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800056e:	4b03      	ldr	r3, [pc, #12]	; (800057c <vPortSetupTimerInterrupt+0x24>)
 8000570:	2207      	movs	r2, #7
 8000572:	601a      	str	r2, [r3, #0]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	e000e010 	.word	0xe000e010
 8000580:	e000e018 	.word	0xe000e018
 8000584:	e000e014 	.word	0xe000e014
 8000588:	0001193f 	.word	0x0001193f

0800058c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af04      	add	r7, sp, #16
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	4613      	mov	r3, r2
 800059a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fdd5 	bl	8000150 <pvPortMalloc>
 80005a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00e      	beq.n	80005cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80005ae:	2058      	movs	r0, #88	; 0x58
 80005b0:	f7ff fdce 	bl	8000150 <pvPortMalloc>
 80005b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d003      	beq.n	80005c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	631a      	str	r2, [r3, #48]	; 0x30
 80005c2:	e005      	b.n	80005d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80005c4:	6978      	ldr	r0, [r7, #20]
 80005c6:	f7ff fe09 	bl	80001dc <vPortFree>
 80005ca:	e001      	b.n	80005d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d013      	beq.n	80005fe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80005d6:	88fa      	ldrh	r2, [r7, #6]
 80005d8:	2300      	movs	r3, #0
 80005da:	9303      	str	r3, [sp, #12]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	68b9      	ldr	r1, [r7, #8]
 80005ec:	68f8      	ldr	r0, [r7, #12]
 80005ee:	f000 f80e 	bl	800060e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80005f2:	69f8      	ldr	r0, [r7, #28]
 80005f4:	f000 f888 	bl	8000708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	e002      	b.n	8000604 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000604:	69bb      	ldr	r3, [r7, #24]
	}
 8000606:	4618      	mov	r0, r3
 8000608:	3720      	adds	r7, #32
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800061c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800061e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	461a      	mov	r2, r3
 8000626:	21a5      	movs	r1, #165	; 0xa5
 8000628:	f001 f808 	bl	800163c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800062c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000636:	3b01      	subs	r3, #1
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	f023 0307 	bic.w	r3, r3, #7
 8000644:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d01f      	beq.n	800068c <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e012      	b.n	8000678 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	4413      	add	r3, r2
 8000658:	7819      	ldrb	r1, [r3, #0]
 800065a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4413      	add	r3, r2
 8000660:	3334      	adds	r3, #52	; 0x34
 8000662:	460a      	mov	r2, r1
 8000664:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b0f      	cmp	r3, #15
 800067c:	d9e9      	bls.n	8000652 <prvInitialiseNewTask+0x44>
 800067e:	e000      	b.n	8000682 <prvInitialiseNewTask+0x74>
			{
				break;
 8000680:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800068a:	e003      	b.n	8000694 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800068c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000694:	6a3b      	ldr	r3, [r7, #32]
 8000696:	2b04      	cmp	r3, #4
 8000698:	d901      	bls.n	800069e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800069a:	2304      	movs	r3, #4
 800069c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a0:	6a3a      	ldr	r2, [r7, #32]
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80006a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a6:	3304      	adds	r3, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fdbf 	bl	800022c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80006ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b0:	3318      	adds	r3, #24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fdba 	bl	800022c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80006b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	f1c3 0205 	rsb	r2, r3, #5
 80006c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80006c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80006ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d0:	2200      	movs	r2, #0
 80006d2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	2200      	movs	r2, #0
 80006d8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80006da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	68f9      	ldr	r1, [r7, #12]
 80006e6:	6938      	ldr	r0, [r7, #16]
 80006e8:	f7ff fe30 	bl	800034c <pxPortInitialiseStack>
 80006ec:	4602      	mov	r2, r0
 80006ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <prvInitialiseNewTask+0xf0>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000710:	f7ff feaa 	bl	8000468 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000714:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <prvAddNewTaskToReadyList+0xc0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	4a2b      	ldr	r2, [pc, #172]	; (80007c8 <prvAddNewTaskToReadyList+0xc0>)
 800071c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <prvAddNewTaskToReadyList+0xc4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d109      	bne.n	800073a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000726:	4a29      	ldr	r2, [pc, #164]	; (80007cc <prvAddNewTaskToReadyList+0xc4>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <prvAddNewTaskToReadyList+0xc0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d110      	bne.n	8000756 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000734:	f000 fa72 	bl	8000c1c <prvInitialiseTaskLists>
 8000738:	e00d      	b.n	8000756 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <prvAddNewTaskToReadyList+0xc8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d109      	bne.n	8000756 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <prvAddNewTaskToReadyList+0xc4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074c:	429a      	cmp	r2, r3
 800074e:	d802      	bhi.n	8000756 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000750:	4a1e      	ldr	r2, [pc, #120]	; (80007cc <prvAddNewTaskToReadyList+0xc4>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <prvAddNewTaskToReadyList+0xcc>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <prvAddNewTaskToReadyList+0xcc>)
 800075e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <prvAddNewTaskToReadyList+0xcc>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076c:	2201      	movs	r2, #1
 800076e:	409a      	lsls	r2, r3
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <prvAddNewTaskToReadyList+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4313      	orrs	r3, r2
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <prvAddNewTaskToReadyList+0xd0>)
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077e:	4613      	mov	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <prvAddNewTaskToReadyList+0xd4>)
 8000788:	441a      	add	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3304      	adds	r3, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4610      	mov	r0, r2
 8000792:	f7ff fd57 	bl	8000244 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000796:	f7ff fe7f 	bl	8000498 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <prvAddNewTaskToReadyList+0xc8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00e      	beq.n	80007c0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <prvAddNewTaskToReadyList+0xc4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <prvAddNewTaskToReadyList+0xd8>)
 80007b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	f3bf 8f4f 	dsb	sy
 80007bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20004500 	.word	0x20004500
 80007cc:	20004428 	.word	0x20004428
 80007d0:	2000450c 	.word	0x2000450c
 80007d4:	2000451c 	.word	0x2000451c
 80007d8:	20004508 	.word	0x20004508
 80007dc:	2000442c 	.word	0x2000442c
 80007e0:	e000ed04 	.word	0xe000ed04

080007e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 80007f6:	f000 f851 	bl	800089c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80007fa:	2100      	movs	r1, #0
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f000 faa9 	bl	8000d54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000802:	f000 f859 	bl	80008b8 <xTaskResumeAll>
 8000806:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d107      	bne.n	800081e <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <vTaskDelay+0x44>)
 8000810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	f3bf 8f4f 	dsb	sy
 800081a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	e000ed04 	.word	0xe000ed04

0800082c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <vTaskStartScheduler+0x58>)
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	2300      	movs	r3, #0
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2300      	movs	r3, #0
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	4912      	ldr	r1, [pc, #72]	; (8000888 <vTaskStartScheduler+0x5c>)
 8000840:	4812      	ldr	r0, [pc, #72]	; (800088c <vTaskStartScheduler+0x60>)
 8000842:	f7ff fea3 	bl	800058c <xTaskCreate>
 8000846:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d116      	bne.n	800087c <vTaskStartScheduler+0x50>
	__asm volatile
 800084e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000852:	f383 8811 	msr	BASEPRI, r3
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	f3bf 8f4f 	dsb	sy
 800085e:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <vTaskStartScheduler+0x64>)
 8000862:	f04f 32ff 	mov.w	r2, #4294967295
 8000866:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <vTaskStartScheduler+0x68>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <vTaskStartScheduler+0x6c>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8000874:	f000 fd12 	bl	800129c <SetupRunTimeStatsTimer>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000878:	f7ff fdd6 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20004524 	.word	0x20004524
 8000888:	08001664 	.word	0x08001664
 800088c:	08000bed 	.word	0x08000bed
 8000890:	20004520 	.word	0x20004520
 8000894:	2000450c 	.word	0x2000450c
 8000898:	20004504 	.word	0x20004504

0800089c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <vTaskSuspendAll+0x18>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a03      	ldr	r2, [pc, #12]	; (80008b4 <vTaskSuspendAll+0x18>)
 80008a8:	6013      	str	r3, [r2, #0]
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20004528 	.word	0x20004528

080008b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80008c6:	f7ff fdcf 	bl	8000468 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <xTaskResumeAll+0xf8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4a37      	ldr	r2, [pc, #220]	; (80009b0 <xTaskResumeAll+0xf8>)
 80008d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <xTaskResumeAll+0xf8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d161      	bne.n	80009a0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80008dc:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <xTaskResumeAll+0xfc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d05d      	beq.n	80009a0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80008e4:	e02e      	b.n	8000944 <xTaskResumeAll+0x8c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <xTaskResumeAll+0x100>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3318      	adds	r3, #24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fd01 	bl	80002fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3304      	adds	r3, #4
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fcfc 	bl	80002fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000906:	2201      	movs	r2, #1
 8000908:	409a      	lsls	r2, r3
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <xTaskResumeAll+0x104>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4313      	orrs	r3, r2
 8000910:	4a2a      	ldr	r2, [pc, #168]	; (80009bc <xTaskResumeAll+0x104>)
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <xTaskResumeAll+0x108>)
 8000922:	441a      	add	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3304      	adds	r3, #4
 8000928:	4619      	mov	r1, r3
 800092a:	4610      	mov	r0, r2
 800092c:	f7ff fc8a 	bl	8000244 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <xTaskResumeAll+0x10c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093a:	429a      	cmp	r2, r3
 800093c:	d302      	bcc.n	8000944 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <xTaskResumeAll+0x110>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <xTaskResumeAll+0x100>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1cc      	bne.n	80008e6 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000952:	f000 f9df 	bl	8000d14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <xTaskResumeAll+0x114>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d010      	beq.n	8000984 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000962:	f000 f837 	bl	80009d4 <xTaskIncrementTick>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <xTaskResumeAll+0x110>)
 800096e:	2201      	movs	r2, #1
 8000970:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1f1      	bne.n	8000962 <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <xTaskResumeAll+0x114>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <xTaskResumeAll+0x110>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d009      	beq.n	80009a0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800098c:	2301      	movs	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <xTaskResumeAll+0x118>)
 8000992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	f3bf 8f4f 	dsb	sy
 800099c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80009a0:	f7ff fd7a 	bl	8000498 <vPortExitCritical>

	return xAlreadyYielded;
 80009a4:	68bb      	ldr	r3, [r7, #8]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20004528 	.word	0x20004528
 80009b4:	20004500 	.word	0x20004500
 80009b8:	200044c0 	.word	0x200044c0
 80009bc:	20004508 	.word	0x20004508
 80009c0:	2000442c 	.word	0x2000442c
 80009c4:	20004428 	.word	0x20004428
 80009c8:	20004514 	.word	0x20004514
 80009cc:	20004510 	.word	0x20004510
 80009d0:	e000ed04 	.word	0xe000ed04

080009d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80009de:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <xTaskIncrementTick+0x124>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d177      	bne.n	8000ad6 <xTaskIncrementTick+0x102>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80009e6:	4b45      	ldr	r3, [pc, #276]	; (8000afc <xTaskIncrementTick+0x128>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3301      	adds	r3, #1
 80009ec:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80009ee:	4a43      	ldr	r2, [pc, #268]	; (8000afc <xTaskIncrementTick+0x128>)
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d110      	bne.n	8000a1c <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80009fa:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <xTaskIncrementTick+0x12c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <xTaskIncrementTick+0x130>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a3e      	ldr	r2, [pc, #248]	; (8000b00 <xTaskIncrementTick+0x12c>)
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4a3e      	ldr	r2, [pc, #248]	; (8000b04 <xTaskIncrementTick+0x130>)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6013      	str	r3, [r2, #0]
 8000a0e:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <xTaskIncrementTick+0x134>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a3c      	ldr	r2, [pc, #240]	; (8000b08 <xTaskIncrementTick+0x134>)
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	f000 f97c 	bl	8000d14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000a1c:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <xTaskIncrementTick+0x138>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d348      	bcc.n	8000ab8 <xTaskIncrementTick+0xe4>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a26:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <xTaskIncrementTick+0x12c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d104      	bne.n	8000a3a <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a30:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <xTaskIncrementTick+0x138>)
 8000a32:	f04f 32ff 	mov.w	r2, #4294967295
 8000a36:	601a      	str	r2, [r3, #0]
					break;
 8000a38:	e03e      	b.n	8000ab8 <xTaskIncrementTick+0xe4>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a3a:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <xTaskIncrementTick+0x12c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d203      	bcs.n	8000a5a <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000a52:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <xTaskIncrementTick+0x138>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000a58:	e02e      	b.n	8000ab8 <xTaskIncrementTick+0xe4>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fc4b 	bl	80002fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d004      	beq.n	8000a76 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	3318      	adds	r3, #24
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fc42 	bl	80002fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	409a      	lsls	r2, r3
 8000a7e:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <xTaskIncrementTick+0x13c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <xTaskIncrementTick+0x13c>)
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <xTaskIncrementTick+0x140>)
 8000a96:	441a      	add	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	f7ff fbd0 	bl	8000244 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <xTaskIncrementTick+0x144>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d3b9      	bcc.n	8000a26 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ab6:	e7b6      	b.n	8000a26 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <xTaskIncrementTick+0x144>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000abe:	4915      	ldr	r1, [pc, #84]	; (8000b14 <xTaskIncrementTick+0x140>)
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d907      	bls.n	8000ae0 <xTaskIncrementTick+0x10c>
			{
				xSwitchRequired = pdTRUE;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e004      	b.n	8000ae0 <xTaskIncrementTick+0x10c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <xTaskIncrementTick+0x148>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <xTaskIncrementTick+0x148>)
 8000ade:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <xTaskIncrementTick+0x14c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <xTaskIncrementTick+0x118>
		{
			xSwitchRequired = pdTRUE;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000aec:	697b      	ldr	r3, [r7, #20]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20004528 	.word	0x20004528
 8000afc:	20004504 	.word	0x20004504
 8000b00:	200044b8 	.word	0x200044b8
 8000b04:	200044bc 	.word	0x200044bc
 8000b08:	20004518 	.word	0x20004518
 8000b0c:	20004520 	.word	0x20004520
 8000b10:	20004508 	.word	0x20004508
 8000b14:	2000442c 	.word	0x2000442c
 8000b18:	20004428 	.word	0x20004428
 8000b1c:	20004510 	.word	0x20004510
 8000b20:	20004514 	.word	0x20004514

08000b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <vTaskSwitchContext+0xa8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <vTaskSwitchContext+0xac>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000b38:	e042      	b.n	8000bc0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <vTaskSwitchContext+0xac>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <vTaskSwitchContext+0xb0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a24      	ldr	r2, [pc, #144]	; (8000bd8 <vTaskSwitchContext+0xb4>)
 8000b46:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <vTaskSwitchContext+0xb4>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <vTaskSwitchContext+0xb8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d909      	bls.n	8000b68 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <vTaskSwitchContext+0xb4>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <vTaskSwitchContext+0xb8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	1ad2      	subs	r2, r2, r3
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <vTaskSwitchContext+0xbc>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000b64:	440a      	add	r2, r1
 8000b66:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <vTaskSwitchContext+0xb4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <vTaskSwitchContext+0xb8>)
 8000b6e:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <vTaskSwitchContext+0xc0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	fab3 f383 	clz	r3, r3
 8000b7c:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	f1c3 031f 	rsb	r3, r3, #31
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <vTaskSwitchContext+0xc4>)
 8000b92:	4413      	add	r3, r2
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3308      	adds	r3, #8
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d104      	bne.n	8000bb6 <vTaskSwitchContext+0x92>
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <vTaskSwitchContext+0xbc>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20004528 	.word	0x20004528
 8000bd0:	20004514 	.word	0x20004514
 8000bd4:	20004538 	.word	0x20004538
 8000bd8:	20004530 	.word	0x20004530
 8000bdc:	2000452c 	.word	0x2000452c
 8000be0:	20004428 	.word	0x20004428
 8000be4:	20004508 	.word	0x20004508
 8000be8:	2000442c 	.word	0x2000442c

08000bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8000bf4:	f000 f852 	bl	8000c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <prvIdleTask+0x28>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d9f9      	bls.n	8000bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <prvIdleTask+0x2c>)
 8000c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	f3bf 8f4f 	dsb	sy
 8000c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8000c10:	e7f0      	b.n	8000bf4 <prvIdleTask+0x8>
 8000c12:	bf00      	nop
 8000c14:	2000442c 	.word	0x2000442c
 8000c18:	e000ed04 	.word	0xe000ed04

08000c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e00c      	b.n	8000c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <prvInitialiseTaskLists+0x60>)
 8000c34:	4413      	add	r3, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fad9 	bl	80001ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d9ef      	bls.n	8000c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <prvInitialiseTaskLists+0x64>)
 8000c4a:	f7ff fad0 	bl	80001ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <prvInitialiseTaskLists+0x68>)
 8000c50:	f7ff facd 	bl	80001ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <prvInitialiseTaskLists+0x6c>)
 8000c56:	f7ff faca 	bl	80001ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <prvInitialiseTaskLists+0x70>)
 8000c5c:	f7ff fac7 	bl	80001ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <prvInitialiseTaskLists+0x74>)
 8000c62:	f7ff fac4 	bl	80001ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <prvInitialiseTaskLists+0x78>)
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <prvInitialiseTaskLists+0x64>)
 8000c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <prvInitialiseTaskLists+0x7c>)
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <prvInitialiseTaskLists+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000442c 	.word	0x2000442c
 8000c80:	20004490 	.word	0x20004490
 8000c84:	200044a4 	.word	0x200044a4
 8000c88:	200044c0 	.word	0x200044c0
 8000c8c:	200044d4 	.word	0x200044d4
 8000c90:	200044ec 	.word	0x200044ec
 8000c94:	200044b8 	.word	0x200044b8
 8000c98:	200044bc 	.word	0x200044bc

08000c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000ca2:	e019      	b.n	8000cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8000ca4:	f7ff fbe0 	bl	8000468 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <prvCheckTasksWaitingTermination+0x4c>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fb20 	bl	80002fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <prvCheckTasksWaitingTermination+0x50>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <prvCheckTasksWaitingTermination+0x50>)
 8000cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <prvCheckTasksWaitingTermination+0x54>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <prvCheckTasksWaitingTermination+0x54>)
 8000ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8000cce:	f7ff fbe3 	bl	8000498 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f80e 	bl	8000cf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <prvCheckTasksWaitingTermination+0x54>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1e1      	bne.n	8000ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200044d4 	.word	0x200044d4
 8000cec:	20004500 	.word	0x20004500
 8000cf0:	200044e8 	.word	0x200044e8

08000cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fa6b 	bl	80001dc <vPortFree>
			vPortFree( pxTCB );
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fa68 	bl	80001dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <prvResetNextTaskUnblockTime+0x38>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d104      	bne.n	8000d2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <prvResetNextTaskUnblockTime+0x3c>)
 8000d26:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000d2c:	e008      	b.n	8000d40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <prvResetNextTaskUnblockTime+0x38>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <prvResetNextTaskUnblockTime+0x3c>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200044b8 	.word	0x200044b8
 8000d50:	20004520 	.word	0x20004520

08000d54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8000d5e:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fac5 	bl	80002fa <uxListRemove>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10b      	bne.n	8000d8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000d76:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8000d8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d10a      	bne.n	8000dac <prvAddCurrentTaskToDelayedList+0x58>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d007      	beq.n	8000dac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3304      	adds	r3, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	481a      	ldr	r0, [pc, #104]	; (8000e10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8000da6:	f7ff fa4d 	bl	8000244 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8000daa:	e026      	b.n	8000dfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d209      	bcs.n	8000dd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	f7ff fa5a 	bl	800028a <vListInsert>
}
 8000dd6:	e010      	b.n	8000dfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3304      	adds	r3, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4610      	mov	r0, r2
 8000de6:	f7ff fa50 	bl	800028a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d202      	bcs.n	8000dfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	6013      	str	r3, [r2, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20004504 	.word	0x20004504
 8000e08:	20004428 	.word	0x20004428
 8000e0c:	20004508 	.word	0x20004508
 8000e10:	200044ec 	.word	0x200044ec
 8000e14:	200044bc 	.word	0x200044bc
 8000e18:	200044b8 	.word	0x200044b8
 8000e1c:	20004520 	.word	0x20004520

08000e20 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	78db      	ldrb	r3, [r3, #3]
 8000e50:	f003 0310 	and.w	r3, r3, #16
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d005      	beq.n	8000e64 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d044      	beq.n	8000ef8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	e038      	b.n	8000eec <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d126      	bne.n	8000ee6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	78db      	ldrb	r3, [r3, #3]
 8000ec4:	2b28      	cmp	r3, #40	; 0x28
 8000ec6:	d105      	bne.n	8000ed4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	e008      	b.n	8000ee6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	78db      	ldrb	r3, [r3, #3]
 8000ed8:	2b48      	cmp	r3, #72	; 0x48
 8000eda:	d104      	bne.n	8000ee6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000edc:	2201      	movs	r2, #1
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2b07      	cmp	r3, #7
 8000ef0:	d9c3      	bls.n	8000e7a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	2bff      	cmp	r3, #255	; 0xff
 8000efe:	d946      	bls.n	8000f8e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	e03a      	b.n	8000f82 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	3308      	adds	r3, #8
 8000f10:	2201      	movs	r2, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d127      	bne.n	8000f7c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000f32:	220f      	movs	r2, #15
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	4013      	ands	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	78db      	ldrb	r3, [r3, #3]
 8000f58:	2b28      	cmp	r3, #40	; 0x28
 8000f5a:	d105      	bne.n	8000f68 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	3308      	adds	r3, #8
 8000f60:	2201      	movs	r2, #1
 8000f62:	409a      	lsls	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	78db      	ldrb	r3, [r3, #3]
 8000f6c:	2b48      	cmp	r3, #72	; 0x48
 8000f6e:	d105      	bne.n	8000f7c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	3308      	adds	r3, #8
 8000f74:	2201      	movs	r2, #1
 8000f76:	409a      	lsls	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	d9c1      	bls.n	8000f0c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	605a      	str	r2, [r3, #4]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000fa4:	887a      	ldrh	r2, [r7, #2]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	611a      	str	r2, [r3, #16]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	615a      	str	r2, [r3, #20]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000fe2:	4909      	ldr	r1, [pc, #36]	; (8001008 <RCC_APB2PeriphClockCmd+0x38>)
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <RCC_APB2PeriphClockCmd+0x38>)
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000fee:	e006      	b.n	8000ffe <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000ff0:	4905      	ldr	r1, [pc, #20]	; (8001008 <RCC_APB2PeriphClockCmd+0x38>)
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <RCC_APB2PeriphClockCmd+0x38>)
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	618b      	str	r3, [r1, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000

0800100c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800101e:	4909      	ldr	r1, [pc, #36]	; (8001044 <RCC_APB1PeriphClockCmd+0x38>)
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <RCC_APB1PeriphClockCmd+0x38>)
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4313      	orrs	r3, r2
 8001028:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800102a:	e006      	b.n	800103a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800102c:	4905      	ldr	r1, [pc, #20]	; (8001044 <RCC_APB1PeriphClockCmd+0x38>)
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <RCC_APB1PeriphClockCmd+0x38>)
 8001030:	69da      	ldr	r2, [r3, #28]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	43db      	mvns	r3, r3
 8001036:	4013      	ands	r3, r2
 8001038:	61cb      	str	r3, [r1, #28]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40021000 	.word	0x40021000

08001048 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a2e      	ldr	r2, [pc, #184]	; (8001118 <TIM_TimeBaseInit+0xd0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <TIM_TimeBaseInit+0x44>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a2d      	ldr	r2, [pc, #180]	; (800111c <TIM_TimeBaseInit+0xd4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00f      	beq.n	800108c <TIM_TimeBaseInit+0x44>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001072:	d00b      	beq.n	800108c <TIM_TimeBaseInit+0x44>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <TIM_TimeBaseInit+0xd8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d007      	beq.n	800108c <TIM_TimeBaseInit+0x44>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a29      	ldr	r2, [pc, #164]	; (8001124 <TIM_TimeBaseInit+0xdc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d003      	beq.n	800108c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a28      	ldr	r2, [pc, #160]	; (8001128 <TIM_TimeBaseInit+0xe0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d108      	bne.n	800109e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001092:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	885a      	ldrh	r2, [r3, #2]
 8001098:	89fb      	ldrh	r3, [r7, #14]
 800109a:	4313      	orrs	r3, r2
 800109c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a22      	ldr	r2, [pc, #136]	; (800112c <TIM_TimeBaseInit+0xe4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00c      	beq.n	80010c0 <TIM_TimeBaseInit+0x78>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <TIM_TimeBaseInit+0xe8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d008      	beq.n	80010c0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010b4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	88da      	ldrh	r2, [r3, #6]
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	4313      	orrs	r3, r2
 80010be:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	89fa      	ldrh	r2, [r7, #14]
 80010c4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	889a      	ldrh	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	881a      	ldrh	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <TIM_TimeBaseInit+0xd0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00f      	beq.n	80010fe <TIM_TimeBaseInit+0xb6>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <TIM_TimeBaseInit+0xd4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00b      	beq.n	80010fe <TIM_TimeBaseInit+0xb6>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <TIM_TimeBaseInit+0xec>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <TIM_TimeBaseInit+0xb6>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a11      	ldr	r2, [pc, #68]	; (8001138 <TIM_TimeBaseInit+0xf0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d003      	beq.n	80010fe <TIM_TimeBaseInit+0xb6>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a10      	ldr	r2, [pc, #64]	; (800113c <TIM_TimeBaseInit+0xf4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d104      	bne.n	8001108 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	7a1b      	ldrb	r3, [r3, #8]
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	829a      	strh	r2, [r3, #20]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40012c00 	.word	0x40012c00
 800111c:	40013400 	.word	0x40013400
 8001120:	40000400 	.word	0x40000400
 8001124:	40000800 	.word	0x40000800
 8001128:	40000c00 	.word	0x40000c00
 800112c:	40001000 	.word	0x40001000
 8001130:	40001400 	.word	0x40001400
 8001134:	40014000 	.word	0x40014000
 8001138:	40014400 	.word	0x40014400
 800113c:	40014800 	.word	0x40014800

08001140 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d008      	beq.n	8001164 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001162:	e007      	b.n	8001174 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	801a      	strh	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	807b      	strh	r3, [r7, #2]
 800118a:	4613      	mov	r3, r2
 800118c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800118e:	787b      	ldrb	r3, [r7, #1]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	899b      	ldrh	r3, [r3, #12]
 8001198:	b29a      	uxth	r2, r3
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	4313      	orrs	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80011a4:	e009      	b.n	80011ba <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	899b      	ldrh	r3, [r3, #12]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4013      	ands	r3, r2
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	819a      	strh	r2, [r3, #12]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	821a      	strh	r2, [r3, #16]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <NVIC_EnableIRQ+0x2c>)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	095b      	lsrs	r3, r3, #5
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100

08001214 <NVIC_ClearPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800121e:	4909      	ldr	r1, [pc, #36]	; (8001244 <NVIC_ClearPendingIRQ+0x30>)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	095b      	lsrs	r3, r3, #5
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	f002 021f 	and.w	r2, r2, #31
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	3360      	adds	r3, #96	; 0x60
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	da0b      	bge.n	8001274 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800125c:	490d      	ldr	r1, [pc, #52]	; (8001294 <NVIC_SetPriority+0x4c>)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	3b04      	subs	r3, #4
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001272:	e009      	b.n	8001288 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001274:	4908      	ldr	r1, [pc, #32]	; (8001298 <NVIC_SetPriority+0x50>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	e000e100 	.word	0xe000e100

0800129c <SetupRunTimeStatsTimer>:
#include "task.h"

GPIO_InitTypeDef gpioInitStruct;

extern "C" void SetupRunTimeStatsTimer(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
	/* Set interrupt priority and enable TIMER7 interrupt in NVIC */

	NVIC_SetPriority(TIM4_IRQn, NVIC_PriorityGroup_0);
 80012a2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80012a6:	201e      	movs	r0, #30
 80012a8:	f7ff ffce 	bl	8001248 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 80012ac:	201e      	movs	r0, #30
 80012ae:	f7ff ff99 	bl	80011e4 <NVIC_EnableIRQ>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80012b2:	2101      	movs	r1, #1
 80012b4:	2004      	movs	r0, #4
 80012b6:	f7ff fea9 	bl	800100c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TimBaseStruct;

	TimBaseStruct.TIM_Prescaler = 0x1194;
 80012ba:	f241 1394 	movw	r3, #4500	; 0x1194
 80012be:	80bb      	strh	r3, [r7, #4]
	TimBaseStruct.TIM_Period = 0x1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM4, &TimBaseStruct);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <SetupRunTimeStatsTimer+0x4c>)
 80012ca:	f7ff febd 	bl	8001048 <TIM_TimeBaseInit>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2101      	movs	r1, #1
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <SetupRunTimeStatsTimer+0x4c>)
 80012d4:	f7ff ff53 	bl	800117e <TIM_ITConfig>

	TIM_Cmd(TIM4, ENABLE);
 80012d8:	2101      	movs	r1, #1
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <SetupRunTimeStatsTimer+0x4c>)
 80012dc:	f7ff ff30 	bl	8001140 <TIM_Cmd>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40000800 	.word	0x40000800

080012ec <_Z5delayj>:

void delay(unsigned int nCount)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	unsigned int i, j;

	for (i = 0; i < nCount; i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d20e      	bcs.n	800131e <_Z5delayj+0x32>
		for (j = 0; j < 0x2AFF; j++)
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	f642 22fe 	movw	r2, #11006	; 0x2afe
 800130a:	4293      	cmp	r3, r2
 800130c:	d803      	bhi.n	8001316 <_Z5delayj+0x2a>
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3301      	adds	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	e7f6      	b.n	8001304 <_Z5delayj+0x18>
	for (i = 0; i < nCount; i++)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e7ec      	b.n	80012f8 <_Z5delayj+0xc>
			;
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <TIM4_IRQHandler>:

volatile unsigned long ulHighFrequencyTimerTicks = 0;

extern "C" void TIM4_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	/* Clear the pending bit in NVIC and TIMER7 */
	NVIC_ClearPendingIRQ(TIM4_IRQn);
 800132c:	201e      	movs	r0, #30
 800132e:	f7ff ff71 	bl	8001214 <NVIC_ClearPendingIRQ>
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8001332:	2101      	movs	r1, #1
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <TIM4_IRQHandler+0x20>)
 8001336:	f7ff ff45 	bl	80011c4 <TIM_ClearITPendingBit>

	/* Increment the counter used to mease execution time */
	ulHighFrequencyTimerTicks++;
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <TIM4_IRQHandler+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a02      	ldr	r2, [pc, #8]	; (800134c <TIM4_IRQHandler+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40000800 	.word	0x40000800
 800134c:	20004538 	.word	0x20004538

08001350 <_Z12ledBlinkTaskPv>:

void ledBlinkTask(void* pv)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8001358:	2101      	movs	r1, #1
 800135a:	2010      	movs	r0, #16
 800135c:	f7ff fe38 	bl	8000fd0 <RCC_APB2PeriphClockCmd>

	gpioInitStruct.GPIO_Pin = GPIO_Pin_13;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <_Z12ledBlinkTaskPv+0x50>)
 8001362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001366:	801a      	strh	r2, [r3, #0]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <_Z12ledBlinkTaskPv+0x50>)
 800136a:	2202      	movs	r2, #2
 800136c:	709a      	strb	r2, [r3, #2]
	gpioInitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <_Z12ledBlinkTaskPv+0x50>)
 8001370:	2210      	movs	r2, #16
 8001372:	70da      	strb	r2, [r3, #3]
	GPIO_Init(GPIOC, &gpioInitStruct);
 8001374:	490a      	ldr	r1, [pc, #40]	; (80013a0 <_Z12ledBlinkTaskPv+0x50>)
 8001376:	480b      	ldr	r0, [pc, #44]	; (80013a4 <_Z12ledBlinkTaskPv+0x54>)
 8001378:	f7ff fd52 	bl	8000e20 <GPIO_Init>

	while (1)
	{
		/* Toggle LED on PA0 */
		// Reset bit will turn on LED (because the logic is interved)
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 800137c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <_Z12ledBlinkTaskPv+0x54>)
 8001382:	f7ff fe17 	bl	8000fb4 <GPIO_ResetBits>
		delay(250);
 8001386:	20fa      	movs	r0, #250	; 0xfa
 8001388:	f7ff ffb0 	bl	80012ec <_Z5delayj>
		// Set bit will turn off LED (because the logic is interved)
		GPIO_SetBits(GPIOC, GPIO_Pin_13);
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <_Z12ledBlinkTaskPv+0x54>)
 8001392:	f7ff fe01 	bl	8000f98 <GPIO_SetBits>
		delay(250);
 8001396:	20fa      	movs	r0, #250	; 0xfa
 8001398:	f7ff ffa8 	bl	80012ec <_Z5delayj>
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 800139c:	e7ee      	b.n	800137c <_Z12ledBlinkTaskPv+0x2c>
 800139e:	bf00      	nop
 80013a0:	20004534 	.word	0x20004534
 80013a4:	40011000 	.word	0x40011000

080013a8 <_Z5task2Pv>:
	}
}

void task2(void* pv)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	while (1)
	{
		vTaskDelay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff fa17 	bl	80007e4 <vTaskDelay>
 80013b6:	e7fb      	b.n	80013b0 <_Z5task2Pv+0x8>

080013b8 <main>:
	}
}

int main()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af02      	add	r7, sp, #8
	xTaskCreate(ledBlinkTask, (const char*) "Ledsignal Task", 128, NULL, 1,
			NULL);
 80013be:	2300      	movs	r3, #0
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <main+0x34>)
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <main+0x38>)
 80013ce:	f7ff f8dd 	bl	800058c <xTaskCreate>
	xTaskCreate(task2, (const char*) "Task 2", 128, NULL, 1, NULL);
 80013d2:	2300      	movs	r3, #0
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	4905      	ldr	r1, [pc, #20]	; (80013f4 <main+0x3c>)
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <main+0x40>)
 80013e2:	f7ff f8d3 	bl	800058c <xTaskCreate>

	vTaskStartScheduler();
 80013e6:	f7ff fa21 	bl	800082c <vTaskStartScheduler>

	while (1)
 80013ea:	e7fe      	b.n	80013ea <main+0x32>
 80013ec:	0800166c 	.word	0x0800166c
 80013f0:	08001351 	.word	0x08001351
 80013f4:	0800167c 	.word	0x0800167c
 80013f8:	080013a9 	.word	0x080013a9

080013fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001400:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001402:	e003      	b.n	800140c <LoopCopyDataInit>

08001404 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001406:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001408:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800140a:	3104      	adds	r1, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800140c:	480b      	ldr	r0, [pc, #44]	; (800143c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001410:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001412:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001414:	d3f6      	bcc.n	8001404 <CopyDataInit>
	ldr	r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001418:	e002      	b.n	8001420 <LoopFillZerobss>

0800141a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800141a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800141c:	f842 3b04 	str.w	r3, [r2], #4

08001420 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001422:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001424:	d3f9      	bcc.n	800141a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001426:	f000 f82b 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f000 f8e3 	bl	80015f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800142e:	f7ff ffc3 	bl	80013b8 <main>
	bx	lr
 8001432:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001434:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001438:	0800168c 	.word	0x0800168c
	ldr	r0, =_sdata
 800143c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001440:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001444:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001448:	2000453c 	.word	0x2000453c

0800144c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC1_2_IRQHandler>

0800144e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001484:	4a15      	ldr	r2, [pc, #84]	; (80014dc <SystemInit+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <SystemInit+0x5c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001490:	4912      	ldr	r1, [pc, #72]	; (80014dc <SystemInit+0x5c>)
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <SystemInit+0x5c>)
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <SystemInit+0x60>)
 8001498:	4013      	ands	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <SystemInit+0x5c>)
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <SystemInit+0x5c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <SystemInit+0x5c>)
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <SystemInit+0x5c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <SystemInit+0x5c>)
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <SystemInit+0x5c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SystemInit+0x5c>)
 80014c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014ca:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80014cc:	f000 f80c 	bl	80014e8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SystemInit+0x64>)
 80014d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	f8ff0000 	.word	0xf8ff0000
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80014ec:	f000 f802 	bl	80014f4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001502:	4a3a      	ldr	r2, [pc, #232]	; (80015ec <SetSysClockTo72+0xf8>)
 8001504:	4b39      	ldr	r3, [pc, #228]	; (80015ec <SetSysClockTo72+0xf8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <SetSysClockTo72+0xf8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3301      	adds	r3, #1
 800151c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d103      	bne.n	800152c <SetSysClockTo72+0x38>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800152a:	d1f0      	bne.n	800150e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800152c:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <SetSysClockTo72+0xf8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001538:	2301      	movs	r3, #1
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	e001      	b.n	8001542 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d14b      	bne.n	80015e0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001548:	4a29      	ldr	r2, [pc, #164]	; (80015f0 <SetSysClockTo72+0xfc>)
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <SetSysClockTo72+0xfc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f043 0310 	orr.w	r3, r3, #16
 8001552:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001554:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <SetSysClockTo72+0xfc>)
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <SetSysClockTo72+0xfc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 0303 	bic.w	r3, r3, #3
 800155e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001560:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <SetSysClockTo72+0xfc>)
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <SetSysClockTo72+0xfc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800156c:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <SetSysClockTo72+0xf8>)
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <SetSysClockTo72+0xf8>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <SetSysClockTo72+0xf8>)
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <SetSysClockTo72+0xf8>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <SetSysClockTo72+0xf8>)
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <SetSysClockTo72+0xf8>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001588:	4a18      	ldr	r2, [pc, #96]	; (80015ec <SetSysClockTo72+0xf8>)
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <SetSysClockTo72+0xf8>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001592:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001594:	4a15      	ldr	r2, [pc, #84]	; (80015ec <SetSysClockTo72+0xf8>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <SetSysClockTo72+0xf8>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800159e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80015a0:	4a12      	ldr	r2, [pc, #72]	; (80015ec <SetSysClockTo72+0xf8>)
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <SetSysClockTo72+0xf8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015aa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80015ac:	bf00      	nop
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <SetSysClockTo72+0xf8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f9      	beq.n	80015ae <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80015ba:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <SetSysClockTo72+0xf8>)
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <SetSysClockTo72+0xf8>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 0303 	bic.w	r3, r3, #3
 80015c4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <SetSysClockTo72+0xf8>)
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <SetSysClockTo72+0xf8>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80015d2:	bf00      	nop
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SetSysClockTo72+0xf8>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d1f9      	bne.n	80015d4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40022000 	.word	0x40022000

080015f4 <__libc_init_array>:
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	2500      	movs	r5, #0
 80015f8:	4e0c      	ldr	r6, [pc, #48]	; (800162c <__libc_init_array+0x38>)
 80015fa:	4c0d      	ldr	r4, [pc, #52]	; (8001630 <__libc_init_array+0x3c>)
 80015fc:	1ba4      	subs	r4, r4, r6
 80015fe:	10a4      	asrs	r4, r4, #2
 8001600:	42a5      	cmp	r5, r4
 8001602:	d109      	bne.n	8001618 <__libc_init_array+0x24>
 8001604:	f000 f822 	bl	800164c <_init>
 8001608:	2500      	movs	r5, #0
 800160a:	4e0a      	ldr	r6, [pc, #40]	; (8001634 <__libc_init_array+0x40>)
 800160c:	4c0a      	ldr	r4, [pc, #40]	; (8001638 <__libc_init_array+0x44>)
 800160e:	1ba4      	subs	r4, r4, r6
 8001610:	10a4      	asrs	r4, r4, #2
 8001612:	42a5      	cmp	r5, r4
 8001614:	d105      	bne.n	8001622 <__libc_init_array+0x2e>
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800161c:	4798      	blx	r3
 800161e:	3501      	adds	r5, #1
 8001620:	e7ee      	b.n	8001600 <__libc_init_array+0xc>
 8001622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001626:	4798      	blx	r3
 8001628:	3501      	adds	r5, #1
 800162a:	e7f2      	b.n	8001612 <__libc_init_array+0x1e>
 800162c:	08001684 	.word	0x08001684
 8001630:	08001684 	.word	0x08001684
 8001634:	08001684 	.word	0x08001684
 8001638:	08001688 	.word	0x08001688

0800163c <memset>:
 800163c:	4603      	mov	r3, r0
 800163e:	4402      	add	r2, r0
 8001640:	4293      	cmp	r3, r2
 8001642:	d100      	bne.n	8001646 <memset+0xa>
 8001644:	4770      	bx	lr
 8001646:	f803 1b01 	strb.w	r1, [r3], #1
 800164a:	e7f9      	b.n	8001640 <memset+0x4>

0800164c <_init>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	bf00      	nop
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr

08001658 <_fini>:
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	bf00      	nop
 800165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165e:	bc08      	pop	{r3}
 8001660:	469e      	mov	lr, r3
 8001662:	4770      	bx	lr
